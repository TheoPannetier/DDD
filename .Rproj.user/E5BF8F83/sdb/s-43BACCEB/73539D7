{
    "contents" : "# brts = branching times (positive, from present to past)\n# - max(brts) = crown age\n# - min(brts) = most recent branching time\n# - pars1[1] = la = (initial) speciation rate\n# - pars1[2] = mu = extinction rate\n# - pars1[3] = K = carrying capacity\n# - pars1[4] = r = ratio of diversity-dependence in extinction rate over speciation rate\n# - pars2[1] = lx = length of ODE variable x\n# - pars2[2] = ddep = diversity-dependent model,mode of diversity-dependence\n#  . ddep == 1 : linear dependence in speciation rate with parameter K\n#  . ddep == 1.3 : linear dependence in speciation rate with parameter K'\n#  . ddep == 2 : exponential dependence in speciation rate\n#  . ddep == 2.1: variant with offset at infinity\n#  . ddep == 2.2: 1/n dependence in speciation rate\n#  . ddep == 2.3: exponential dependence in speciation rate with parameter x\n#  . ddep == 3 : linear dependence in extinction rate\n#  . ddep == 4 : exponential dependence in extinction rate\n#  . ddep == 4.1: variant with offset at infinity\n#  . ddep == 4.2: 1/n dependence in speciation rate\n#  . ddep == 5 : linear dependence in speciation and extinction rate\n# - pars2[3] = cond = conditioning\n#  . cond == 0 : conditioning on stem or crown age\n#  . cond == 1 : conditioning on stem or crown age and non-extinction of the phylogeny\n#  . cond == 2 : conditioning on stem or crown age and on the total number of extant taxa (including missing species)\n#  . cond == 3 : conditioning on the total number of extant taxa (including missing species)\n# - pars2[4] = btorph = likelihood of branching times (0) or phylogeny (1), differ by a factor (S - 1)! where S is the number of extant species\n# - pars2[5] = parameters and likelihood should be printed (1) or not (0)\n# - pars2[6] = likelihood is for a tree with crown age (2) or stem age (1)\n# missnumspec = number of missing species    \n# methode = the method used in the numerical solving of the set of the ode's or 'analytical' which means matrix exponentiation is used\n\ndd_loglik = function(pars1,pars2,brts,missnumspec,methode = 'analytical')\n{\n   if(methode == 'analytical')\n   {\n       out = dd_loglik2(pars1,pars2,brts,missnumspec)\n   } else {\n       out = dd_loglik1(pars1,pars2,brts,missnumspec,methode = methode)\n   }\n   return(out)\n}\n\ndd_loglik1 = function(pars1,pars2,brts,missnumspec,methode = 'lsoda')\n{\nif(length(pars2) == 4)\n{\n    pars2[5] = 0\n    pars2[6] = 2\n}\nddep = pars2[2]\ncond = pars2[3]\nbtorph = pars2[4]\nsoc = pars2[6]\nif(cond == 3) { soc = 2 }\nla = pars1[1]\nmu = pars1[2]\nK = pars1[3]\nif(ddep == 5) {r = pars1[4]} else {r = 0}\nif(ddep == 1 | ddep == 5)\n{ \n    lx = min(max(1 + missnumspec,1 + ceiling(la/(la - mu) * (r + 1) * K)),ceiling(pars2[1]))\n} else {\nif(ddep == 1.3)\n{\n    lx = min(ceiling(K),ceiling(pars2[1]))\n} else {\n    lx = round(pars2[1])\n}}\nn0 = (ddep == 2 | ddep == 4)\nif((ddep == 1) & ((mu == 0 & missnumspec == 0 & floor(K) != ceiling(K) & la > 0.05) | K == Inf))\n{\n    loglik = bd_loglik(pars1[1:(2 + (K < Inf))],c(2*(mu == 0 & K < Inf),pars2[3:6]),brts,missnumspec)\n} else {\nabstol = 1e-16\nreltol = 1e-10 \nbrts = -sort(abs(as.numeric(brts)),decreasing = TRUE)\nif(sum(brts == 0) == 0)\n{\n   brts[length(brts) + 1] = 0\n}\n\nS = length(brts) + (soc - 2)\nif(min(pars1) < 0)\n{\n    loglik = -Inf\n} else {\nif((mu == 0 & (ddep == 2 | ddep == 2.1 | ddep == 2.2)) | (la == 0 & (ddep == 4 | ddep == 4.1 | ddep == 4.2)) | (la <= mu))\n{ \n    cat(\"These parameter values cannot satisfy lambda(N) = mu(N) for a positive and finite N.\\n\")\n    loglik = -Inf\n} else {\n    if(((ddep == 1 | ddep == 5) & ceiling(la/(la - mu) * (r + 1) * K) < (S + missnumspec)) | ((ddep == 1.3) & (S + missnumspec > ceiling(K))))\n    {\n       loglik = -Inf\n    } else {\n       loglik = (btorph == 0) * lgamma(S)\n       if(cond != 3)\n       {\n          probs = rep(0,lx)\n          probs[1] = 1 # change if other species at stem/crown age \n          for(k in 2:(S + 2 - soc))\n          {\n             k1 = k + (soc - 2)\n             y = ode(probs,brts[(k-1):k],dd_loglik_rhs,c(pars1,k1,ddep),rtol = reltol,atol = abstol,method = methode)\n             probs = y[2,2:(lx+1)]\n             if(k < (S + 2 - soc))\n             {\n                 probs = flavec(ddep,la,mu,K,r,lx,k1,n0) * probs # speciation event\n                 if(sum(probs) <= 0)\n                 {\n                    loglik = -Inf\n                    break\n                 } else {\n                    loglik = loglik + log(sum(probs))\n                 }\n                 probs = probs/sum(probs)\n             }\n          }    \n       } else {\n          probs = rep(0,lx + 1)\n          probs[1 + missnumspec] = 1\n          for(k in (S + 2 - soc):2)\n          {\n             k1 = k + (soc - 2)\n             y = ode(probs,-brts[k:(k-1)],dd_loglik_bw_rhs,c(pars1,k1,ddep),rtol = reltol,atol = abstol,method = methode)\n             probs = y[2,2:(lx+2)]\n             if(k > soc)\n             {\n                 probs = c(flavec(ddep,la,mu,K,r,lx,k1-1,n0),1) * probs # speciation event\n                 if(sum(probs[1:lx]) <= 0)\n                 {\n                    loglik = -Inf\n                    break\n                 } else {\n                    loglik = loglik + log(sum(probs[1:lx]))\n                 }\n                 probs[1:lx] = probs[1:lx]/sum(probs[1:lx])\n             }    \n          }\n       }\n       if(probs[1 + missnumspec] <= 0 | loglik == -Inf)\n       {\n          loglik = -Inf\n       } else  {        \n          loglik = loglik + (cond != 3 | soc == 1) * log(probs[1 + (cond != 3) * missnumspec]) - lgamma(S + missnumspec + 1) + lgamma(S + 1) + lgamma(missnumspec + 1)\n  \n          logliknorm = 0\n          if(cond == 1 | cond == 2)\n          {\n             probsn = rep(0,lx)\n             probsn[1] = 1 # change if other species at stem or crown age\n             k = soc\n             t1 = brts[1] \n             t2 = brts[S + 2 - soc]\n             y = ode(probsn,c(t1,t2),dd_loglik_rhs,c(pars1,k,ddep),rtol = reltol,atol = abstol,method = methode);\n             probsn = y[2,2:(lx+1)]\n             if(soc == 1) { aux = 1:lx }\n             if(soc == 2) { aux = (2:(lx+1)) * (3:(lx+2))/6 }\n             probsc = probsn/aux\n             if(cond == 1) { logliknorm = log(sum(probsc)) }\n             if(cond == 2) { logliknorm = log(probsc[S + missnumspec - soc + 1])}             \n          }\n          if(cond == 3)\n          { \n             probsn = rep(0,lx + 1)\n             probsn[S + missnumspec + 1] = 1\n             TT = max(1,1/abs(la - mu)) * 1E+10 * max(abs(brts)) # make this more efficient later\n             y = ode(probsn,c(0,TT),dd_loglik_bw_rhs,c(pars1,0,ddep),rtol = reltol,atol = abstol,method = methode)\n             logliknorm = log(y[2,lx + 2])\n             if(soc == 2)\n             {\n                probsn = rep(0,lx + 1)\n                probsn[1:lx] = probs[1:lx]\n                probsn = c(flavec(ddep,la,mu,K,r,lx,1,n0),1) * probsn # speciation event\n                y = ode(probsn,c(max(abs(brts)),TT),dd_loglik_bw_rhs,c(pars1,1,ddep),rtol = reltol,atol = abstol,method = methode)\n                logliknorm = logliknorm - log(y[2,lx + 2])\n             }\n          }\n          loglik = loglik - logliknorm\n       }\n    }\n}}\nif(pars2[5] == 1)\n{\n    s1 = sprintf('Parameters: %f %f %f',pars1[1],pars1[2],pars1[3])\n    if(ddep == 5) {s1 = sprintf('%s %f',s1,pars1[4])}\n    s2 = sprintf(', Loglikelihood: %f',loglik)\n    cat(s1,s2,\"\\n\",sep = \"\")\n    flush.console()\n}\n}\nloglik = as.numeric(loglik)\nif(is.nan(loglik) | is.na(loglik))\n{\n    loglik = -Inf\n}\nreturn(loglik)\n}\n\n\ndd_loglik2 = function(pars1,pars2,brts,missnumspec,methode = 'lsoda')\n{\nif(length(pars2) == 4)\n{\n    pars2[5] = 0\n    pars2[6] = 2\n}\nddep = pars2[2]\ncond = pars2[3]\nbtorph = pars2[4]\nsoc = pars2[6]\nif(cond == 3)\n{ \n    soc = 2\n}\nla = pars1[1]\nmu = pars1[2]\nK = pars1[3]\nif(ddep == 5)\n{\n    r = pars1[4]\n} else\n{\n    r = 0\n}\nif(ddep == 1 | ddep == 5)\n{ \n    lx = min(max(1 + missnumspec,1 + ceiling(la/(la - mu) * (r + 1) * K)),ceiling(pars2[1]))\n} else if(ddep == 1.3)\n{\n    lx = min(ceiling(K),ceiling(pars2[1]))\n} else {\n    lx = round(pars2[1])\n}\nn0 = (ddep == 2 | ddep == 4)\nif((ddep == 1) & ((mu == 0 & missnumspec == 0 & floor(K) != ceiling(K) & la > 0.05) | K == Inf))\n{\n    loglik = bd_loglik(pars1[1:(2 + (K < Inf))],c(2*(mu == 0 & K < Inf),pars2[3:6]),brts,missnumspec)\n} else {\nabstol = 1e-16\nreltol = 1e-10 \nbrts = -sort(abs(as.numeric(brts)),decreasing = TRUE)\nif(sum(brts == 0) == 0)\n{\n   brts[length(brts) + 1] = 0\n}\nS = length(brts) + (soc - 2)\nif(min(pars1) < 0)\n{\n    loglik = -Inf\n} else {\nif((mu == 0 & (ddep == 2 | ddep == 2.1 | ddep == 2.2)) | (la == 0 & (ddep == 4 | ddep == 4.1 | ddep == 4.2)) | (la <= mu))\n{ \n    cat(\"These parameter values cannot satisfy lambda(N) = mu(N) for a positive and finite N.\\n\")\n    loglik = -Inf\n} else {\nprint(ddep)\nprint(K)\nprint(S)\nprint((S + missnumspec))\nprint(ceiling(la/(la - mu) * (r + 1) * K))\n    if(((ddep == 1 | ddep == 5) & ceiling(la/(la - mu) * (r + 1) * K) < (S + missnumspec)) | ((ddep == 1.3) & ((S + missnumspec) > ceiling(K))))\n    {\n       loglik = -Inf\n    } else {\n       loglik = (btorph == 0) * lgamma(S)\n       if(cond != 3)\n       {\n          probs = rep(0,lx)\n          probs[1] = 1 # change if other species at stem/crown age \n          for(k in 2:(S + 2 - soc))\n          {\n             k1 = k + (soc - 2)\n             #y = ode(probs,brts[(k-1):k],dd_loglik_rhs,c(pars1,k1,ddep),rtol = reltol,atol = abstol,method = methode)\n             #probs2 = y[2,2:(lx+1)]\n             probs = dd_loglik_M(pars1,lx,k1,ddep,tt = abs(brts[k] - brts[k-1]),probs)\n             #print(as.numeric(probs[1:10]))\n             #print(as.numeric(probs2[1:10])) \n             if(k < (S + 2 - soc))\n             {\n                 #probs = flavec(ddep,la,mu,K,r,lx,k1,n0) * probs # speciation event\n                 probs = lambdamu(0:(lx - 1) + k1,c(pars1[1:3],r),ddep)[[1]] * probs\n                 if(sum(probs) <= 0 | sum(is.na(probs)) > 0 | sum(is.nan(probs)) > 0)\n                 {\n                    loglik = -Inf\n                    break\n                 } else {\n                    loglik = loglik + log(sum(probs))\n                 }\n                 probs = probs/sum(probs)\n             }\n          }    \n       } else {\n          probs = rep(0,lx + 1)\n          probs[1 + missnumspec] = 1\n          for(k in (S + 2 - soc):2)\n          {\n             k1 = k + (soc - 2)\n             #y = ode(probs,-brts[k:(k-1)],dd_loglik_bw_rhs,c(pars1,k1,ddep),rtol = reltol,atol = abstol,method = methode)\n             #probs2 = y[2,2:(lx+2)]\n             probs = dd_loglik_M_bw(pars1,lx,k1,ddep,tt = abs(brts[k] - brts[k-1]),probs[1:lx])\n             probs = c(probs,0)\n             if(k > soc)\n             {\n                 #probs = c(flavec(ddep,la,mu,K,r,lx,k1-1,n0),1) * probs # speciation event\n                 probs = c(lambdamu(0:(lx - 1) + k1 - 1,pars1,ddep)[[1]],1) * probs\n                 if(sum(probs[1:lx]) <= 0 | sum(is.na(probs[1:lx])) > 0 | sum(is.nan(probs[1:lx])) > 0)\n                 {\n                    loglik = -Inf\n                    break\n                 } else {\n                    loglik = loglik + log(sum(probs[1:lx]))\n                 }\n                 probs[1:lx] = probs[1:lx]/sum(probs[1:lx])\n             }    \n          }\n       }\n       if(probs[1 + (cond != 3) * missnumspec] <= 0 | loglik == -Inf)\n       {\n          loglik = -Inf\n       } else  {        \n          loglik = loglik + (cond != 3 | soc == 1) * log(probs[1 + (cond != 3) * missnumspec]) - lgamma(S + missnumspec + 1) + lgamma(S + 1) + lgamma(missnumspec + 1)\n  \n          logliknorm = 0\n          if(cond == 1 | cond == 2)\n          {\n             probsn = rep(0,lx)\n             probsn[1] = 1 # change if other species at stem or crown age\n             k = soc\n             t1 = brts[1] \n             t2 = brts[S + 2 - soc]\n             #y = ode(probsn,c(t1,t2),dd_loglik_rhs,c(pars1,k,ddep),rtol = reltol,atol = abstol,method = methode);\n             #probsn = y[2,2:(lx+1)]\n             probsn = dd_loglik_M(pars1,lx,k,ddep,tt = abs(t2 - t1),probsn)\n             if(soc == 1) { aux = 1:lx }\n             if(soc == 2) { aux = (2:(lx+1)) * (3:(lx+2))/6 }\n             probsc = probsn/aux\n             if(cond == 1) { logliknorm = log(sum(probsc)) }\n             if(cond == 2) { logliknorm = log(probsc[S + missnumspec - soc + 1])}             \n          }\n          if(cond == 3)\n          { \n             #probsn = rep(0,lx + 1)\n             #probsn[S + missnumspec + 1] = 1 #/ (S + missnumspec)\n             #TT = max(1,1/abs(la - mu)) * 100000000 * max(abs(brts)) # make this more efficient later\n             #y = ode(probsn,c(0,TT),dd_loglik_bw_rhs,c(pars1,0,ddep),rtol = reltol,atol = abstol,method = methode)\n             #logliknorm = log(y[2,lx + 2])\n             probsn = rep(0,lx + 1)\n             probsn[2] = 1\n             MM = dd_loglik_M_aux(pars1,lx + 1,k = 0,ddep)\n             MM = MM[-1,-1]\n             #probsn = SparseM::solve(-MM,probsn[2:(lx + 1)])\n             MMinv = SparseM::solve(MM)\n             probsn = -MMinv %*% probsn[2:(lx + 1)]\n             logliknorm = log(probsn[S + missnumspec])\n             if(soc == 2)\n             {\n                #probsn = rep(0,lx + 1)\n                #probsn[1:lx] = probs[1:lx]\n                #probsn = c(flavec(ddep,la,mu,K,r,lx,1,n0),1) * probsn # speciation event\n                #probsn = c(lambdamu(0:(lx - 1) + 1,pars1,ddep)[[1]],1) * probsn # speciation event\n                #y = ode(probsn,c(max(abs(brts)),TT),dd_loglik_bw_rhs,c(pars1,1,ddep),rtol = reltol,atol = abstol,method = methode)\n                #logliknorm = logliknorm - log(y[2,lx + 2])\n                probsn2 = rep(0,lx)\n                probsn2 = lambdamu(0:(lx - 1) + 1,pars1,ddep)[[1]] * probs[1:lx]\n                MM = dd_loglik_M_bw_aux(pars1,lx,k = 1,ddep)\n                MMinv = SparseM::solve(MM)\n                #probsn2 = SparseM::solve(-MM,probsn2[1:lx])\n                probsn2 = -MMinv %*% probsn2[1:lx]\n                logliknorm = logliknorm - log(probsn2[1])            \n             }\n          }\n          loglik = loglik - logliknorm\n       }\n    }\n}}\nif(pars2[5] == 1)\n{\n    s1 = sprintf('Parameters: %f %f %f',pars1[1],pars1[2],pars1[3])\n    if(ddep == 5) {s1 = sprintf('%s %f',s1,pars1[4])}\n    s2 = sprintf(', Loglikelihood: %f',loglik)\n    cat(s1,s2,\"\\n\",sep = \"\")\n    flush.console()\n}\n}\nloglik = as.numeric(loglik)\nif(is.nan(loglik) | is.na(loglik))\n{\n    loglik = -Inf\n}\nreturn(loglik)\n}",
    "created" : 1450196108914.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1477441291",
    "id" : "73539D7",
    "lastKnownWriteTime" : 1453497669,
    "path" : "D:/data/Ms/DDD/R/dd_loglik.R",
    "project_path" : "R/dd_loglik.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}