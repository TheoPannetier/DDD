{
    "collab_server" : "",
    "contents" : "# brtsM = branching times of main clade M (positive, from present to past)\n# brtsS = branching times of subclade S (positive, from present to past)\n# - max(brts) = crown age\n# - min(brts) = most recent branching time\n# - pars1[1] = laM = (initial) speciation rate of main clade\n# - pars1[2] = muM = extinction rate of main clade\n# - pars1[3] = KM = carrying capacity of main clade\n# - pars1[4] = laS = (initial) speciation rate of subclade\n# - pars1[5] = muS = extinction rate of subclade\n# - pars1[6] = KS = carrying capacity of subclade\n# - pars1[7] = tinn = time of key innovation\n# - pars2[1] = lx = length of ODE variable x\n# - pars2[2] = ddep = diversity-dependent model, mode of diversity-dependence\n#  . ddep == 1 : linear dependence in speciation rate with parameter K\n#  . ddep == 1.3 : linear dependence in speciation rate with parameter K'\n#  . ddep == 2 : exponential dependence in speciation rate\n#  . ddep == 2.1: variant with offset at infinity\n#  . ddep == 2.2: 1/n dependence in speciation rate\n#  . ddep == 2.3: exponential dependence in speciation rate with parameter x\n#  . ddep == 3 : linear dependence in extinction rate\n#  . ddep == 4 : exponential dependence in extinction rate\n#  . ddep == 4.1: variant with offset at infinity\n#  . ddep == 4.2: 1/n dependence in speciation rate\n# - pars2[3] = cond = conditioning\n#  . cond == 0 : no conditioning\n#  . cond == 1 : conditioning on non-extinction of the phylogeny\n# - pars2[4] = tsplit = time of split of innovative branch\n# - pars2[5] = printing of parameters and likelihood (1) or not (0)\n# - pars2[6] = likelihood is for a tree with crown age (2) or stem age (1)\n# missnumspec = number of missing species in main clade M and subclade S\n# methode = the method used in the numerical solving of the set of the ode's\n\ndd_KI_loglik = function(pars1,pars2,brtsM,brtsS,missnumspec,methode = 'analytical')\n{\n   if(methode == 'analytical')\n   {\n       out = dd_KI_loglik2(pars1,pars2,brtsM,brtsS,missnumspec)\n   } else {\n       out = dd_KI_loglik1(pars1,pars2,brtsM,brtsS,missnumspec,methode = methode)\n   }\n   return(out)\n}\n\ndd_KI_loglik1 = function(pars1,pars2,brtsM,brtsS,missnumspec,methode = 'lsoda')\n{\nif(length(pars2) == 4)\n{\n    pars2[5] = 0\n    pars2[6] = 2\n}\nabstol = 1e-16\nreltol = 1e-14\nm = missnumspec\n# order branching times\nbrts = -sort(abs(c(brtsM,brtsS)),decreasing = TRUE)\nif(sum(brts == 0) == 0)\n{ \n   brts[length(brts) + 1] = 0\n}\nsoc = pars2[6]\nS = length(brts) + (soc - 2)\nbrtsM = -sort(abs(brtsM),decreasing = TRUE)\nif(sum(brtsM == 0) == 0)\n{ \n   brtsM[length(brtsM) + 1] = 0\n}\nbrtsS = -sort(abs(brtsS),decreasing = TRUE)\nif(sum(brtsS == 0) == 0)\n{\n   brtsS[length(brtsS) + 1] = 0\n}\n\nif(min(pars1) < 0 | -pars1[7] <= min(brtsM) | -pars1[7] >= min(brtsS))\n{\n    loglik = -Inf\n} else {\nif(((pars1[2] == 0 || pars1[4] == 0) && pars2[2] == 2) | ((pars1[1] == 0 | pars1[3] == 0) & pars2[2] == 4) | pars1[1] <= pars1[2] | pars1[4] <= pars1[5])\n{ \n    cat(\"These parameter values cannot satisfy lambda(N) = mu(N) for some finite N.\\n\")\n    loglik = -Inf\n} else {\n    laM = pars1[1]\n    muM = pars1[2]\n    KM = pars1[3]\n    laS = pars1[4]\n    muS = pars1[5]\n    KS = pars1[6]\n    tinn = -pars1[7]\n    lmax = pars2[1]\n    ddep = pars2[2]\n    if(ddep == 1)\n    {\n        lxM = min(max(1 + m[1],1 + ceiling(laM/(laM - muM) * KM)),ceiling(lmax))\n        lxS = min(max(1 + m[1],1 + ceiling(laS/(laS - muS) * KS)),ceiling(lmax))\n    } else {\n       if(ddep == 1.3)\n       {\n          lxM = min(max(1 + m[1],1 + ceiling(KM)),ceiling(lmax))\n          lxS = min(max(1 + m[1],1 + ceiling(KS)),ceiling(lmax))         \n       } else {\n          lxM = round(lmax)\n          lxS = round(lmax)\n       }\n    }\n\n    n0 = (ddep == 2 | ddep == 4)\n    cond = pars2[3]\n    tsplit = -pars2[4]    \n    S1 = length(brtsM) - 1 + (soc - 2)\n    if(sum(brtsS == tinn) == 0) { brtsS = c(tinn,brtsS) }\n    S2 = length(brtsS) - 1\n    S1a = S1\n    S2a = S2\n    summ = sum(m)\n    if(length(m) == 2)\n    {\n       S1a = S1 + m[1]\n       S2a = S2 + m[2]\n       summ = 0\n    }  \n    if((ddep == 1 & ( (ceiling(laM/(laM - muM) * KM) < S1a) | (ceiling(laS/(laS - muS) * KS) < S2a) )) |\n       (ddep == 1.3 & ( (ceiling(KM) < S1a) | (ceiling(KS) < S2a) | (ceiling(KM) + ceiling(KS) < S1a + S2a + summ) )))\n    { \n       loglik = -Inf\n    } else {\n\n    # avoid coincidence of branching time and key innovation time\n    if(sum(abs(brtsM - tinn) < 1E-14) == 1) { tinn = tinn - 1E-8 }\n\n    # compute likelihood of clade M\n    loglikM = 0\n    lx = lxM\n    probs = rep(0,lx)\n    probs[1] = 1 # change if other species at crown age\n\n    ka = sum(brtsM < tinn);\n    for(k in 2:(ka+1))\n    {\n       k1 = k + (soc - 2)\n       t1 = brtsM[k - 1]; t2 = min(c(tinn,brtsM[k]))\n       y = ode(probs,c(t1,t2),dd_loglik_rhs,c(pars1[1:3],k1,ddep),rtol = reltol,atol = abstol,method = methode)\n       probs = y[2,2:(lx + 1)]\n       if(t2 < tinn)\n       {\n           probs = flavec(ddep,laM,muM,KM,0,lxM,k1,n0) * probs # speciation event\n           sumprobs = sum(probs)\n           if(sumprobs <= 0)\n           { \n              loglik = -Inf\n              break\n           } else {\n              loglikM = loglikM + log(sumprobs)\n           }\n           probs = probs/sumprobs\n       }\n    }\n    for(k in (ka + 1):max(ka + 1,S1 + 1))\n    {\n       k1 = k + (soc - 2)\n       t1 = max(tinn,brtsM[k - 1]); t2 = brtsM[k];\n       y = ode(probs,c(t1,t2),dd_loglik_rhs,c(pars1[1:3],k1-1,ddep),rtol = reltol,atol = abstol,method = methode)\n       probs = y[2,2:(lx + 1)]\n       if(k < (S1+1))\n       {\n           probs = flavec(ddep,laM,muM,KM,0,lxM,k1-1,n0) * probs # speciation event\n           sumprobs = sum(probs)\n           if(sumprobs <= 0) { loglik = -Inf } else\n           {\n              loglikM = loglikM + log(sumprobs)\n           }\n           probs = probs/sumprobs\n       }\n    }\n    if(length(m) == 1)\n    { \n       loglikM = loglikM + log(probs[1 + (0:m)])   \n    } else {\n       loglikM = loglikM + log(probs[1 + m[1]])   \n    }\n    # compute likelihood of clade S\n    loglikS = 0\n    lx = lxS\n    probs = rep(0,lx)\n    probs[1] = 1\n    for(k in 1:S2)\n    {\n       t1 = brtsS[k]; t2 = brtsS[k+1]\n       y = ode(probs,c(t1,t2),dd_loglik_rhs,c(pars1[4:6],k,ddep),rtol = reltol,atol = abstol,method = methode)\n       probs = y[2,2:(lx+1)]\n       if(k < S2)\n       {\n           probs = flavec(ddep,laS,muS,KS,0,lxS,k,n0) * probs # speciation event\n           sumprobs = sum(probs)\n           if(sumprobs <= 0)\n           {\n              loglik = -Inf\n           } else  {\n              loglikS = loglikS + log(sumprobs)\n           }\n           probs = probs/sumprobs\n       }\n    }\n    if(length(m) == 1)\n    {\n       loglikS = loglikS + log(probs[1 + (0:m)])\n    } else {\n       loglikS = loglikS + log(probs[1 + m[2]])\n    }\n\n    #if(cond == 3)\n    #{\n    #   loglikS = 0\n    #   lx = lxS\n    #   probs = rep(0,lx + 1)\n    #   if(length(m) == 1)\n    #   {\n    #      probs[1:(m+1)] = 1\n    #   } else {\n    #      probs[1 + m[2]] = 1\n    #   }\n    #   for(k in (S2 + 1):2)\n    #   {\n    #      k1 = k - 1\n    #      y = ode(probs,-brts[k:(k-1)],dd_loglik_bw_rhs,c(pars1,k1,ddep),rtol = reltol,atol = abstol,method = methode)\n    #      probs = y[2,2:(lx+2)]\n    #      if(k1 > 1)\n    #      {\n    #         probs = c(flavec(ddep,la,mu,K,r,lx,k1-1,n0),1) * probs # speciation event\n    #      }\n    #      if(sum(probs[1:lx]) <= 0)\n    #      {\n    #         loglik = -Inf\n    #         break\n    #      } else {\n    #         loglikS = loglikS + log(sum(probs[1:lx]))\n    #      }\n    #      probs[1:lx] = probs[1:lx]/sum(probs[1:lx])\n    #   }    \n    #   loglikS = loglikS + log(probs[1])\n    #}\n\n    # total likelihood = likelihood clade M x likelihood clade S\n    if(length(m) == 1)\n    {\n       #loglik = log(sum(exp(loglikM + loglikS[length(loglikS):1])))\n       loglikMmax = max(loglikM)\n       loglikSmax = max(loglikS)\n       loglikMdelta = loglikM - loglikMmax\n       loglikSdelta = loglikS - loglikSmax\n       loglik = loglikMmax + loglikSmax + log(sum(exp(loglikMdelta + loglikSdelta[length(loglikSdelta):1])))\n    } else {\n       loglik = loglikM + loglikS\n    }\n    if(is.nan(loglik) | is.na(loglik))\n    {\n       loglik = -Inf\n    }   \n\n    if(cond == 0 | loglik == -Inf)\n    {\n       logliknorm = 0\n    } else {   \n       # COMPUTE NORMALIZATION\n       tcrown = brts[1]\n       tpres = 0\n       # compute survival probability of clade S\n       lx = lxS\n       nx = -1:lx\n       if(ddep == 1) \n       { \n           lavec = pmax(rep(0,lx + 2),laS - (laS - muS)/KS * nx)\n           muvec = muS * rep(1,lx + 2)\n       } \n       if(ddep == 1.3) \n       { \n           lavec = pmax(rep(0,lx + 2),laS * (1 - nx/KS))\n           muvec = muS * rep(1,lx + 2)\n       } \n       if(ddep == 2 | ddep == 2.1 | ddep == 2.2)\n       {\n           x = -(log(laS/muS)/log(KS+n0))^(ddep != 2.2) \n           lavec = pmax(rep(0,lx + 2),laS * (nx + n0)^x)\n           muvec = muS * rep(1,lx + 2)\n       }\n       if(ddep == 2.3)\n       {\n           x = KS \n           lavec = pmax(rep(0,lx + 2),laS * (nx + n0)^x)\n           muvec = muS * rep(1,lx + 2)\n       }       \n       if(ddep == 3)\n       {\n           lavec = laS * rep(1,lx + 2)\n           muvec = muS + (laS - muS)/KS * nx\n       }    \n       if(ddep == 4 | ddep == 4.1 | ddep == 4.2)\n       {\n           lavec = laS * rep(1,lx + 2)\n           x = (log(laS/muS)/log(KS+n0))^(ddep != 4.2)\n           muvec = (nx + n0)^x\n       }    \n       m1 = lavec[1:lx] * nx[1:lx]\n       m2 = muvec[3:(lx + 2)] * nx[3:(lx + 2)]\n       m3 = (lavec[2:(lx + 1)] + muvec[2:(lx + 1)]) * nx[2:(lx + 1)]\n       probs = rep(0,lx) # probs[1] = extinction probability\n       probs[2] = 1 # clade S starts with one species\n       y = ode(probs,c(tinn,tpres),dd_logliknorm_rhs1,c(m1,m2,m3),rtol = reltol,atol = abstol,method = methode)\n       probs = y[2,2:(lx+1)]   \n       PS = 1 - probs[1]\n   \n       # compute survival probability of clade M\n       lx = lxM\n       nx1 = rep(-1:lx,lx + 2)\n       dim(nx1) = c(lx + 2,lx + 2) # row index = number of species in first group \n       nx2 = t(nx1) # column index = number of species in second group\n       nxt = nx1 + nx2\n       if(ddep == 1) \n       { \n           lavec = pmax(matrix(0,lx + 2,lx + 2),laM - (laM-muM)/KM * nxt)\n           muvec = muM * matrix(1,lx + 2,lx + 2)\n       }         \n       if(ddep == 1.3) \n       { \n           lavec = pmax(matrix(0,lx + 2,lx + 2),laM * (1 - nxt/KM))\n           muvec = muM * matrix(1,lx + 2,lx + 2)\n       } \n       if(ddep == 2 | ddep == 2.1 | ddep == 2.2)\n       { \n           x = -(log(laM/muM)/log(KM+n0))^(ddep != 2.2)\n           lavec = pmax(matrix(0,lx + 2,lx + 2),laM * (nxt + n0)^x)\n           muvec = muM * matrix(1,lx + 2,lx + 2)\n       }\n       if(ddep == 2.3)\n       { \n           x = KM\n           lavec = pmax(matrix(0,lx + 2,lx + 2),laM * (nxt + n0)^x)\n           muvec = muM * matrix(1,lx + 2,lx + 2)\n       }    \n       if(ddep == 3)\n       {\n           lavec = laM * matrix(1,lx + 2,lx + 2)\n           muvec = muM + (laM - muM)/KM * nxt\n       }    \n       if(ddep == 4 | ddep == 4.1 | ddep == 4.2)\n       {\n           lavec = laM * matrix(1,lx + 2,lx + 2)\n           x = (log(laM/muM)/log(KM+n0))^(ddep != 4.2)\n           muvec = (nxt + n0)^x\n       }    \n       m1 = lavec[1:lx,2:(lx+1)] * nx1[1:lx,2:(lx+1)]\n       m2 = muvec[3:(lx+2),2:(lx+1)] * nx1[3:(lx+2),2:(lx+1)]\n       ma = lavec[2:(lx+1),2:(lx+1)] + muvec[2:(lx+1),2:(lx+1)]\n       m3 = ma * nx1[2:(lx+1),2:(lx+1)]\n       m4 = lavec[2:(lx+1),1:lx] * nx2[2:(lx+1),1:lx]\n       m5 = muvec[2:(lx+1),3:(lx+2)] * nx2[2:(lx+1),3:(lx+2)]\n       m6 = ma * nx2[2:(lx+1),2:(lx+1)]\n       probs = matrix(0,lx,lx)\n\n       # probs[1,1] = probability of extinction of both lineages\n       # sum(probs[1:lx,1]) = probability of extinction of second lineage\n       probs[2,2] = 1 # clade M starts with two species\n       # STEP 1: integrate from tcrown to tinn\n       dim(probs) = c(lx*lx,1)\n       y = ode(probs,c(tcrown,tinn),dd_logliknorm_rhs2,list(m1,m2,m3,m4,m5,m6),rtol = reltol,atol = abstol, method = \"ode45\")\n       probs = y[2,2:(lx * lx + 1)]\n       dim(probs) = c(lx,lx)\n       probs[1,1:lx] = 0\n       probs[1:lx,1] = 0\n       # STEP 2: transformation at tinn\n       nx1a = nx1[2:(lx+1),2:(lx+1)]\n       nx2a = nx2[2:(lx+1),2:(lx+1)]\n       probs = probs * nx1a/(nx1a+nx2a)\n       probs = rbind(probs[2:lx,1:lx], rep(0,lx))\n       dim(probs) = c(lx * lx,1)\n       # STEP 3: integrate from tinn to tpres\n       y = ode(probs,c(tinn,tpres),dd_logliknorm_rhs2,list(m1,m2,m3,m4,m5,m6),rtol = reltol,atol = abstol, method = \"ode45\")\n       probs = y[2,2:(lx * lx + 1)]\n       dim(probs) = c(lx,lx)\n       PM12 = sum(probs[2:lx,2:lx])\n       PM2 = sum(probs[1,2:lx])\n       logliknorm = log(2) + log(PM12 + PS * PM2)\n    }\n    if(length(m) > 1)\n    {\n       Sv = c(S1,S2)\n    } else {\n       Sv = S\n    }\n    loglik = loglik - logliknorm - sum(lgamma(Sv + m + 1) - lgamma(Sv + 1) - lgamma(m + 1))\n}\n}}\nif(pars2[5] == 1)\n{\n    s1 = sprintf('Parameters: %f %f %f %f %f %f %f, ',pars1[1],pars1[2],pars1[3],pars1[4],pars1[5],pars1[6],pars1[7])\n    s2 = sprintf('Loglikelihood: %f',loglik)\n    cat(s1,s2,\"\\n\",sep = \"\")\n    flush.console()\n}\nloglik = as.numeric(loglik)\nif(is.nan(loglik) | is.na(loglik))\n{\n    loglik = -Inf\n}\nreturn(loglik)\n}   \n\n\ndd_KI_loglik2 = function(pars1,pars2,brtsM,brtsS,missnumspec,methode = 'lsoda')\n{\nif(length(pars2) == 4)\n{\n    pars2[5] = 0\n    pars2[6] = 2\n}\nabstol = 1e-16\nreltol = 1e-14\nm = missnumspec\n# order branching times\nbrts = -sort(abs(c(brtsM,brtsS)),decreasing = TRUE)\nif(sum(brts == 0) == 0)\n{ \n   brts[length(brts) + 1] = 0\n}\nsoc = pars2[6]\nS = length(brts) + (soc - 2)\nbrtsM = -sort(abs(brtsM),decreasing = TRUE)\nif(sum(brtsM == 0) == 0)\n{ \n   brtsM[length(brtsM) + 1] = 0\n}\nbrtsS = -sort(abs(brtsS),decreasing = TRUE)\nif(sum(brtsS == 0) == 0)\n{\n   brtsS[length(brtsS) + 1] = 0\n}\n\nif(min(pars1) < 0 | -pars1[7] <= min(brtsM) | -pars1[7] >= min(brtsS))\n{\n    loglik = -Inf\n} else {\nif(((pars1[2] == 0 || pars1[4] == 0) && pars2[2] == 2) | ((pars1[1] == 0 | pars1[3] == 0) & pars2[2] == 4) | pars1[1] <= pars1[2] | pars1[4] <= pars1[5])\n{ \n    cat(\"These parameter values cannot satisfy lambda(N) = mu(N) for some finite N.\\n\")\n    loglik = -Inf\n} else {\n    laM = pars1[1]\n    muM = pars1[2]\n    KM = pars1[3]\n    laS = pars1[4]\n    muS = pars1[5]\n    KS = pars1[6]\n    tinn = -pars1[7]\n    lmax = pars2[1]\n    ddep = pars2[2]\n    if(ddep == 1)\n    {\n        lxM = min(max(1 + m[1],1 + ceiling(laM/(laM - muM) * KM)),ceiling(lmax))\n        lxS = min(max(1 + m[1],1 + ceiling(laS/(laS - muS) * KS)),ceiling(lmax))\n    } else if(ddep == 1.3)\n    {\n        lxM = min(max(1 + m[1],1 + ceiling(KM)),ceiling(lmax))\n        lxS = min(max(1 + m[1],1 + ceiling(KS)),ceiling(lmax))         \n    } else {\n        lxM = round(lmax)\n        lxS = round(lmax)\n    }\n    n0 = (ddep == 2 | ddep == 4)\n    cond = pars2[3]\n    tsplit = -pars2[4]    \n    S1 = length(brtsM) - 1 + (soc - 2)\n    if(sum(brtsS == tinn) == 0)\n    {\n       brtsS = c(tinn,brtsS)\n    }\n    S2 = length(brtsS) - 1\n    S1a = S1\n    S2a = S2\n    summ = sum(m)\n    if(length(m) == 2)\n    {\n       S1a = S1 + m[1]\n       S2a = S2 + m[2]\n       summ = 0\n    }  \n    if((ddep == 1 & ( (ceiling(laM/(laM - muM) * KM) < S1a) | (ceiling(laS/(laS - muS) * KS) < S2a) )) |\n       (ddep == 1.3 & ( (ceiling(KM) < S1a) | (ceiling(KS) < S2a) | (ceiling(KM) + ceiling(KS) < S1a + S2a + summ) )))\n    { \n       loglik = -Inf\n    } else {\n\n    # avoid coincidence of branching time and key innovation time\n    if(sum(abs(brtsM - tinn) < 1E-14) == 1)\n    {\n        tinn = tinn - 1E-8\n    }\n\n    # compute likelihood of clade M\n    loglikM = 0\n    lx = lxM\n    probs = rep(0,lx)\n    probs[1] = 1 # change if other species at crown age\n\n    ka = sum(brtsM < tinn);\n    for(k in 2:(ka+1))\n    {\n       k1 = k + (soc - 2)\n       t1 = brtsM[k - 1]; t2 = min(c(tinn,brtsM[k]))\n       #y = ode(probs,c(t1,t2),dd_loglik_rhs,c(pars1[1:3],k1,ddep),rtol = reltol,atol = abstol,method = methode)\n       #probs2 = y[2,2:(lx + 1)]\n       #MM = dd_loglik_M_aux(pars1[1:3],lx,k1,ddep)\n       #probs3 = Matrix::expm(MM * abs(t2 - t1)) %*% probs\n       probs = dd_loglik_M(pars1[1:3],lx,k1,ddep,tt = abs(t2 - t1),probs)\n       if(t2 < tinn)\n       {\n           probs = lambdamu(0:(lx - 1) + k1,c(pars1[1:3],0),ddep)[[1]] * probs\n           sumprobs = sum(probs)\n           if(sumprobs <= 0)\n           { \n              loglik = -Inf\n              break\n           } else {\n              loglikM = loglikM + log(sumprobs)\n           }\n           probs = probs/sumprobs\n       }\n    }\n    for(k in (ka + 1):max(ka + 1,S1 + 1))\n    {\n       k1 = k + (soc - 2)\n       t1 = max(tinn,brtsM[k - 1]); t2 = brtsM[k];\n       #y = ode(probs,c(t1,t2),dd_loglik_rhs,c(pars1[1:3],k1-1,ddep),rtol = reltol,atol = abstol,method = methode)\n       #probs = y[2,2:(lx + 1)]\n       probs = dd_loglik_M(pars1[1:3],lx,k1-1,ddep,tt = abs(t2 - t1),probs)\n       if(k < (S1+1))\n       {\n           #probs = flavec(ddep,laM,muM,KM,0,lxM,k1-1,n0) * probs # speciation event\n           probs = lambdamu(0:(lx - 1) + k1 - 1,c(pars1[1:3],0),ddep)[[1]] * probs\n           sumprobs = sum(probs)\n           if(sumprobs <= 0)\n           {\n              loglik = -Inf\n           } else {\n              loglikM = loglikM + log(sumprobs)\n           }\n           probs = probs/sumprobs\n       }\n    }\n    if(length(m) == 1)\n    { \n       loglikM = loglikM + log(probs[1 + (0:m)])   \n    } else {\n       loglikM = loglikM + log(probs[1 + m[1]])   \n    }\n    # compute likelihood of clade S\n    loglikS = 0\n    lx = lxS\n    probs = rep(0,lx)\n    probs[1] = 1\n    for(k in 1:S2)\n    {\n       t1 = brtsS[k]; t2 = brtsS[k+1]\n       #y = ode(probs,c(t1,t2),dd_loglik_rhs,c(pars1[4:6],k,ddep),rtol = reltol,atol = abstol,method = methode)\n       #probs = y[2,2:(lx+1)]\n       probs = dd_loglik_M(pars1[4:6],lx,k,ddep,tt = abs(t2 - t1),probs)\n       if(k < S2)\n       {\n           #probs = flavec(ddep,laS,muS,KS,0,lxS,k,n0) * probs # speciation event\n           probs = lambdamu(0:(lx - 1) + k,c(pars1[4:6],0),ddep)[[1]] * probs\n           sumprobs = sum(probs)\n           if(sumprobs <= 0)\n           {\n              loglik = -Inf\n           } else  {\n              loglikS = loglikS + log(sumprobs)\n           }\n           probs = probs/sumprobs\n       }\n    }\n    if(length(m) == 1)\n    {\n       loglikS = loglikS + log(probs[1 + (0:m)])\n    } else {\n       loglikS = loglikS + log(probs[1 + m[2]])\n    }\n\n    # total likelihood = likelihood clade M x likelihood clade S\n    if(length(m) == 1)\n    {\n       #loglik = log(sum(exp(loglikM + loglikS[length(loglikS):1])))\n       loglikMmax = max(loglikM)\n       loglikSmax = max(loglikS)\n       loglikMdelta = loglikM - loglikMmax\n       loglikSdelta = loglikS - loglikSmax\n       loglik = loglikMmax + loglikSmax + log(sum(exp(loglikMdelta + loglikSdelta[length(loglikSdelta):1])))\n    } else {\n       loglik = loglikM + loglikS\n    }\n\n    if(is.nan(loglik) | is.na(loglik))\n    {\n       loglik = -Inf\n    }   \n\n    if(cond == 0 | loglik == -Inf)\n    {\n       logliknorm = 0\n    } else {   \n       # COMPUTE NORMALIZATION\n       tcrown = brts[1]\n       tpres = 0\n       # compute survival probability of clade S\n       lx = lxS\n       probs = rep(0,lx) # probs[1] = extinction probability\n       probs[2] = 1 # clade S starts with one species\n       #nx = -1:lx\n       #lambdamu = lambdamu(nx,c(pars1[4:6],0),ddep,tt = 1)\n       #lavec = lambdamu[[1]]\n       #muvec = lambdamu[[2]]\n       #m1 = lavec[1:lx] * nx[1:lx]\n       #m2 = muvec[3:(lx + 2)] * nx[3:(lx + 2)]\n       #m3 = (lavec[2:(lx + 1)] + muvec[2:(lx + 1)]) * nx[2:(lx + 1)]\n       #y = ode(probs,c(tinn,tpres),dd_logliknorm_rhs1,c(m1,m2,m3),rtol = reltol,atol = abstol,method = methode)\n       #probs = y[2,2:(lx+1)]   \n       #PS = 1 - probs[1]\n       probs = dd_loglik_M(pars1[4:6],lx,0,ddep,tt = abs(tpres - tinn),probs)\n       PS = 1 - probs[1]\n   \n       # compute survival probability of clade M\n       lx = lxM\n       #nx1 = rep(-1:lx,lx + 2)\n       #dim(nx1) = c(lx + 2,lx + 2) # row index = number of species in first group \n       #nx2 = t(nx1) # column index = number of species in second group\n       #lambdamu = lambdamu2(0:(lx - 1),pars1[1:3],ddep)\n       #lavec = lambdamu[[1]]\n       #muvec = lambdamu[[2]]\n       #m1 = lavec[1:lx,2:(lx+1)] * nx1[1:lx,2:(lx+1)]\n       #m2 = muvec[3:(lx+2),2:(lx+1)] * nx1[3:(lx+2),2:(lx+1)]\n       #ma = lavec[2:(lx+1),2:(lx+1)] + muvec[2:(lx+1),2:(lx+1)]\n       #m3 = ma * nx1[2:(lx+1),2:(lx+1)]\n       #m4 = lavec[2:(lx+1),1:lx] * nx2[2:(lx+1),1:lx]\n       #m5 = muvec[2:(lx+1),3:(lx+2)] * nx2[2:(lx+1),3:(lx+2)]\n       #m6 = ma * nx2[2:(lx+1),2:(lx+1)]\n       probs = matrix(0,lx,lx)\n       # probs[1,1] = probability of extinction of both lineages\n       # sum(probs[1:lx,1]) = probability of extinction of second lineage\n       probs[2,2] = 1 # clade M starts with two species\n       # STEP 1: integrate from tcrown to tinn\n       dim(probs) = c(lx*lx,1)\n       #y = ode(probs,c(tcrown,tinn),dd_logliknorm_rhs2,list(m1,m2,m3,m4,m5,m6),rtol = reltol,atol = abstol, method = \"ode45\")\n       #probs = y[2,2:(lx * lx + 1)]\n       #dim(probs) = c(lx,lx)\n       #probs[1,1:lx] = 0                                                                           \n       #probs[1:lx,1] = 0\n       ly = lx^2\n       #probs = rep(0,ly)\n       #probs[lx + 2] = 1\n       probs = dd_loglik_M2(pars = pars1[1:3],lx = lx,ddep = ddep,tt = abs(tinn - tcrown),p = probs)\n       dim(probs) = c(lx,lx)\n       probs[1,1:lx] = 0\n       probs[1:lx,1] = 0\n       #probs[1:lx] = 0                  \n       #probs[seq(lx + 1,ly,by = lx)] = 0\n       # STEP 2: transformation at tinn\n       #dim(probs) = c(lx,lx)\n       #nx1a = nx1[2:(lx+1),2:(lx+1)]\n       #nx2a = nx2[2:(lx+1),2:(lx+1)]\n       #probs = probs * nx1a/(nx1a+nx2a)\n       #probs = rbind(probs[2:lx,1:lx], rep(0,lx))\n       #dim(probs) = c(lx * lx,1)\n       auxM1 = rep(0:(lx - 1),times = lx) + rep(0:(lx - 1),each = lx)\n       probs = probs * rep(0:(lx - 1),times = lx)/auxM1\n       dim(probs) = c(lx,lx)\n       probs = rbind(probs[2:lx,1:lx], rep(0,lx))\n       dim(probs) = c(lx * lx,1)\n       #probs = c(probs[-c(seq(lx + 1,ly,by = lx))],rep(0,lx))\n       # STEP 3: integrate from tinn to tpres\n       #y = ode(probs,c(tinn,tpres),dd_logliknorm_rhs2,list(m1,m2,m3,m4,m5,m6),rtol = reltol,atol = abstol, method = \"ode45\")\n       #probs = y[2,2:(lx * lx + 1)]\n       probs = dd_loglik_M2(pars = pars1[1:3],lx = lx,ddep = ddep,tt = abs(tpres - tinn),p = probs)\n       dim(probs) = c(lx,lx)      \n       PM12 = sum(probs[2:lx,2:lx])\n       PM2 = sum(probs[1,2:lx])\n       logliknorm = log(2) + log(PM12 + PS * PM2)\n    }\n    if(length(m) > 1)\n    {\n       Sv = c(S1,S2)\n    } else {\n       Sv = S\n    }\n    loglik = loglik - logliknorm - sum(lgamma(Sv + m + 1) - lgamma(Sv + 1) - lgamma(m + 1))\n}\n}}\nif(pars2[5] == 1)\n{\n    s1 = sprintf('Parameters: %f %f %f %f %f %f %f, ',pars1[1],pars1[2],pars1[3],pars1[4],pars1[5],pars1[6],pars1[7])\n    s2 = sprintf('Loglikelihood: %f',loglik)\n    cat(s1,s2,\"\\n\",sep = \"\")\n    flush.console()\n}\nloglik = as.numeric(loglik)\nif(is.nan(loglik) | is.na(loglik))\n{\n    loglik = -Inf\n}\nreturn(loglik)\n}   \n",
    "created" : 1487876517135.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2941089414",
    "id" : "9B280D91",
    "lastKnownWriteTime" : 1487861066,
    "last_content_update" : 1487861066,
    "path" : "D:/data/Ms/DDD/DDD/R/dd_KI_loglik.R",
    "project_path" : "R/dd_KI_loglik.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}