
R Under development (unstable) (2016-06-14 r70782) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "DDD"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "DDD-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('DDD')
Loading required package: deSolve

Attaching package: 'deSolve'

The following object is masked from 'package:graphics':

    matplot

Loading required package: ape
Loading required package: ade4
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("L2phylo")
> ### * L2phylo
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: L2phylo
> ### Title: Function to convert a table with speciation and extinction
> ###   events to a phylogeny
> ### Aliases: L2phylo
> ### Keywords: models
> 
> ### ** Examples
> 
> sim = dd_sim(c(0.2,0.1,20),10)
> phy = L2phylo(sim$L)
> plot(phy)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("L2phylo", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bd_ML")
> ### * bd_ML
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bd_ML
> ### Title: Maximization of the loglikelihood under the
> ###   diversity-independent, possibly time-dependent diversification model
> ### Aliases: bd_ML
> ### Keywords: models
> 
> ### ** Examples
> 
> cat("Estimating parameters for a set of branching times brts with the default settings:")
Estimating parameters for a set of branching times brts with the default settings:> brts = 1:20
> bd_ML(brts = brts, cond = 1)
You are optimizing lambda0 mu0 
You are fixing lambda1 mu1 
Optimizing the likelihood - this may take a while. 
The loglikelihood for the inital parameter values is -67.89565 

 Maximum likelihood parameter estimates: lambda0: 0.082413, mu0: 0.000012, lambda1: 0.000000, mu1: 0.000000:  
 Maximum loglikelihood: -66.379536 
     lambda0          mu0 lambda1 mu1    loglik df conv
1 0.08241342 1.162588e-05       0   0 -66.37954  2    0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bd_ML", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bd_loglik")
> ### * bd_loglik
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bd_loglik
> ### Title: Loglikelihood for diversity-independent diversification model
> ### Aliases: bd_loglik
> ### Keywords: models
> 
> ### ** Examples
> bd_loglik(pars1 = c(0.5,0.1), pars2 = c(0,1,1,0,2), brts = 1:10, missnumspec = 0) 
[1] -35.86764
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bd_loglik", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_KI_ML")
> ### * dd_KI_ML
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_KI_ML
> ### Title: Maximization of the loglikelihood under a diversity-dependent
> ###   diversification model with decoupling of a subclade's diversication
> ###   dynamics from the main clade's dynamics
> ### Aliases: dd_KI_ML
> ### Keywords: models
> 
> ### ** Examples
> 
> cat("This will estimate parameters for two sets of branching times brtsM, brtsS\n")
This will estimate parameters for two sets of branching times brtsM, brtsS
> cat("without conditioning.\n")
without conditioning.
> cat("The tolerance of the optimization is set high so runtime is fast in this example.\n")
The tolerance of the optimization is set high so runtime is fast in this example.
> cat("In real applications, use the default or more stringent settins for tol.\n")
In real applications, use the default or more stringent settins for tol.
> brtsM = 4:10
> brtsS = seq(0.1,3.5,0.7)
> tsplit = 5
> dd_KI_ML(brtsM = brtsM, brtsS = brtsS, tsplit = tsplit, idparsopt = c(1:3,6,7),
+           initparsopt = c(0.885, 2e-14, 6.999, 6.848, 4.001), idparsfix = NULL, parsfix = NULL,
+           idparsnoshift = c(4,5), cond = 0, tol = c(3E-1,3E-1,3E-1))
You are optimizing la_M mu_M K_M K_S t_d 
You are fixing nothing 
You are not shifting la_S mu_S 
Optimizing the likelihood - this may take a while. 
The loglikelihood for the initial parameter values is -22.50742 

 Maximum likelihood parameter estimates: 0.885000 0.000000 6.999000 0.885000 0.000000 6.848000 4.001000 
 Maximum loglikelihood: -22.507420 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_KI_ML", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_KI_loglik")
> ### * dd_KI_loglik
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_KI_loglik
> ### Title: Loglikelihood for diversity-dependent diversification models
> ###   with decoupling of a subclade from a main clade at time t = t_d
> ### Aliases: dd_KI_loglik
> ### Keywords: models
> 
> ### ** Examples
> 
> pars1 = c(0.25,0.12,25.51,1.0,0.16,8.61,9.8)
> pars2 = c(200,1,0,18.8,1,2)
> missnumspec = 0
> brtsM = c(25.2,24.6,24.0,22.5,21.7,20.4,19.9,19.7,18.8,17.1,15.8,11.8,9.7,8.9,5.7,5.2)
> brtsS = c(9.6,8.6,7.4,4.9,2.5)
> dd_KI_loglik(pars1,pars2,brtsM,brtsS,missnumspec,method = 'ode45')
Parameters: 0.250000 0.120000 25.510000 1.000000 0.160000 8.610000 9.800000, Loglikelihood: -77.815687
[1] -77.81569
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_KI_loglik", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_KI_sim")
> ### * dd_KI_sim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_KI_sim
> ### Title: Function to simulate a key innovation in macro-evolution with
> ###   the innovative clade decoupling from the diversity-dependent
> ###   diversification dynamics of the main clade
> ### Aliases: dd_KI_sim
> ### Keywords: models
> 
> ### ** Examples
>  dd_KI_sim(c(0.2,0.1,20,0.1,0.05,30,4),10) 
$tes

Phylogenetic tree with 9 tips and 8 internal nodes.

Tip labels:
	t1, t5, t9, t10, t6, t8, ...

Rooted; includes branch lengths.

$tas

Phylogenetic tree with 10 tips and 9 internal nodes.

Tip labels:
	t1, t5, t9, t10, t6, t8, ...

Rooted; includes branch lengths.

$L
            [,1] [,2] [,3]     [,4] [,5]
 [1,] 10.0000000    0   -1 -1.00000    0
 [2,] 10.0000000   -1    2 -1.00000    1
 [3,]  7.7136072    2    3  7.55018    0
 [4,]  7.6009966    3    4 -1.00000    0
 [5,]  4.2939535   -1   -5 -1.00000    0
 [6,]  3.7392983   -5   -6 -1.00000    0
 [7,]  3.7328908   -6   -7 -1.00000    0
 [8,]  3.6885643   -6   -8 -1.00000    0
 [9,]  2.5151370   -5   -9 -1.00000    0
[10,]  0.3621142   -9  -10 -1.00000    0

$tesS
NULL

$tasS
NULL

$tes2

Phylogenetic tree with 9 tips and 8 internal nodes.

Tip labels:
	t1, t5, t9, t10, t6, t8, ...

The tree includes a mapped, 2-state discrete character with states:
	0, 1

Rooted; includes branch lengths.

$tas2

Phylogenetic tree with 10 tips and 9 internal nodes.

Tip labels:
	t1, t5, t9, t10, t6, t8, ...

The tree includes a mapped, 2-state discrete character with states:
	0, 1

Rooted; includes branch lengths.

> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_KI_sim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_ML")
> ### * dd_ML
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_ML
> ### Title: Maximization of the loglikelihood under a diversity-dependent
> ###   diversification model
> ### Aliases: dd_ML
> ### Keywords: models
> 
> ### ** Examples
> 
> cat("Estimating the intrinsic speciation rate lambda and the carrying capacity K")
Estimating the intrinsic speciation rate lambda and the carrying capacity K> cat("for a fixed extinction rate of 0.1, conditioning on clade survival and two missing species:")
for a fixed extinction rate of 0.1, conditioning on clade survival and two missing species:> brts = 1:5
> dd_ML(brts = brts,initparsopt = c(1.3078,7.4188), idparsopt = c(1,3), parsfix = 0.1,
+       cond = 1, missnumspec = 2, tol = c(1E-3,1E-3,1E-4), optimmethod = 'simplex')
You are optimizing lambda K 
You are fixing mu 
Optimizing the likelihood - this may take a while. 
The loglikelihood for the initial parameter values is -9.349088 
1 1.3078 7.41879999999999 -9.34908792257591 initial 
2 1.3078 7.41879999999999 -9.34908792257591 contract inside 
3 1.3078 7.41879999999999 -9.34908792257591 contract inside 
4 1.3078 7.41879999999999 -9.34908792257591 contract inside 
5 1.3078 7.41879999999999 -9.34908792257591 reflect 
6 1.3078 7.41879999999999 -9.34908792257591 contract inside 
7 1.3078 7.41879999999999 -9.34908792257591 contract outside 
8 1.3078 7.41879999999999 -9.34908792257591 contract inside 
9 1.3078 7.41879999999999 -9.34908792257591 reflect 
10 1.3078 7.41879999999999 -9.34908792257591 contract inside 
11 1.3078 7.41879999999999 -9.34908792257591 contract outside 
12 1.3078 7.41879999999999 -9.34908792257591 contract outside 
13 1.3078 7.41879999999999 -9.34908792257591 contract outside 
14 1.3078 7.41879999999999 -9.34908792257591 contract outside 
15 1.3078 7.41879999999999 -9.34908792257591 contract outside 
16 1.3078 7.41879999999999 -9.34908792257591 contract outside 
17 1.3078 7.41879999999999 -9.34908792257591 contract outside 
18 1.3078 7.41879999999999 -9.34908792257591 contract outside 
19 1.3078 7.41879999999999 -9.34908792257591 contract outside 
20 1.3078 7.41879999999999 -9.34908792257591 contract inside 
Optimization has terminated successfully. 

 Maximum likelihood parameter estimates: lambda: 1.307800, mu: 0.100000, K: 7.418800 
 Maximum loglikelihood: -9.349088 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_ML", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_MS_ML")
> ### * dd_MS_ML
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_MS_ML
> ### Title: Maximization of the loglikelihood under a diversity-dependent
> ###   diversification model with decoupling of a subclade's diversication
> ###   dynamics from the main clade's dynamics
> ### Aliases: dd_MS_ML
> ### Keywords: models
> 
> ### ** Examples
> 
> cat("This will estimate parameters for two sets of branching times brtsM, brtsS\n")
This will estimate parameters for two sets of branching times brtsM, brtsS
> cat("without conditioning.\n")
without conditioning.
> cat("The tolerance of the optimization is set high so runtime is fast in this example.\n")
The tolerance of the optimization is set high so runtime is fast in this example.
> cat("In real applications, use the default or more stringent settins for tol.\n")
In real applications, use the default or more stringent settins for tol.
> brtsM = 4:10
> brtsS = seq(0.1,3.5,0.7)
> tsplit = 5
> dd_MS_ML(brtsM = brtsM, brtsS = brtsS, tsplit = tsplit, idparsopt = c(1:3,6),
+           initparsopt = c(0.885, 2e-14, 10, 4.001), idparsfix = NULL, parsfix = NULL,
+           idparsnoshift = c(4,5), cond = 0, tol = c(3E-1,3E-1,3E-1))
You are optimizing la_M mu_M K t_d 
You are fixing nothing 
You are not shifting la_S mu_S 
Optimizing the likelihood - this may take a while. 
The carrying capacity is lower than the actual number of species.
The loglikelihood for the initial parameter values is -Inf 
The initial parameter values have a likelihood that is equal to 0 or below machine precision. Try again with different initial values.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_MS_ML", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_MS_loglik")
> ### * dd_MS_loglik
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_MS_loglik
> ### Title: Loglikelihood for macro-evolutionary succession under
> ###   diversity-dependent diversification with the key innovation at time t
> ###   = t_d
> ### Aliases: dd_MS_loglik
> ### Keywords: models
> 
> ### ** Examples
> 
> pars1 = c(0.2,0.1,40,1.0,0.1,9.8)
> pars2 = c(200,1,0,18.8,1,2)
> missnumspec = 0
> brtsM = c(25.2,24.6,24.0,22.5,21.7,20.4,19.9,19.7,18.8,17.1,15.8,11.8,9.7,8.9,5.7,5.2)
> brtsS = c(9.6,8.6,7.4,4.9,2.5)
> dd_MS_loglik(pars1,pars2,brtsM,brtsS,missnumspec,methode = 'ode45')
This only works for ddmodel = 1.2 or ddmodel == 1.3.
Parameters: 0.200000 0.100000 40.000000 1.000000 0.100000 9.800000, Loglikelihood: -Inf
[1] -Inf
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_MS_loglik", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_MS_sim")
> ### * dd_MS_sim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_MS_sim
> ### Title: Function to simulate the macro-evolutionary succession process
> ###   assuming diversity-dependent diversification
> ### Aliases: dd_MS_sim
> ### Keywords: models
> 
> ### ** Examples
>  dd_MS_sim(c(0.2,0.1,20,0.1,0.05,4),10) 
$tes

Phylogenetic tree with 8 tips and 7 internal nodes.

Tip labels:
	t1, t5, t9, t6, t8, t7, ...

Rooted; includes branch lengths.

$tas

Phylogenetic tree with 9 tips and 8 internal nodes.

Tip labels:
	t1, t5, t9, t6, t8, t7, ...

Rooted; includes branch lengths.

$L
           [,1] [,2] [,3]      [,4] [,5]
 [1,] 10.000000    0   -1 -1.000000    0
 [2,] 10.000000   -1    2 -1.000000    1
 [3,]  7.631950    2    3  7.458359    0
 [4,]  7.513084    3    4 -1.000000    0
 [5,]  4.021230   -1   -5 -1.000000    0
 [6,]  3.712560   -5   -6 -1.000000    0
 [7,]  3.705336   -6   -7 -1.000000    0
 [8,]  3.654181   -6   -8 -1.000000    0
 [9,]  2.266214   -5   -9 -1.000000    0

$tesS
NULL

$tasS
NULL

$tes2

Phylogenetic tree with 8 tips and 7 internal nodes.

Tip labels:
	t1, t5, t9, t6, t8, t7, ...

The tree includes a mapped, 2-state discrete character with states:
	0, 1

Rooted; includes branch lengths.

$tas2

Phylogenetic tree with 9 tips and 8 internal nodes.

Tip labels:
	t1, t5, t9, t6, t8, t7, ...

The tree includes a mapped, 2-state discrete character with states:
	0, 1

Rooted; includes branch lengths.

> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_MS_sim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_SR_ML")
> ### * dd_SR_ML
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_SR_ML
> ### Title: Maximization of the loglikelihood under a diversity-dependent
> ###   diversification model with a shift in the parameters
> ### Aliases: dd_SR_ML
> ### Keywords: models
> 
> ### ** Examples
> 
> cat("This will estimate parameters for a sets of branching times brts without conditioning.\n")
This will estimate parameters for a sets of branching times brts without conditioning.
> cat("The tolerance of the optimization is set ridiculously high to make runtime fast.\n")
The tolerance of the optimization is set ridiculously high to make runtime fast.
> cat("In real applications, use the default or more stringent settings for tol.\n")
In real applications, use the default or more stringent settings for tol.
> brts = 1:10
> dd_SR_ML(brts = brts, initparsopt = c(0.4581, 1E-6, 17.69, 11.09, 8.9999), idparsopt = c(1:3,6,7),
+          idparsfix = NULL, parsfix = NULL, idparsnoshift = c(4,5), cond = 0,
+          tol = c(1E-1,1E-1,1E-1),optimmethod = 'simplex'
+ )
You are optimizing la mu K K2 tshift 
You are fixing nothing 
You are not shifting la2 mu2 
Optimizing the likelihood - this may take a while. 
The loglikelihood for the initial parameter values is -24.52893 
1 0.4581 1e-06 17.69 11.09 8.9999 -24.5289252582909 initial 
Optimization has terminated successfully. 

 Maximum likelihood parameter estimates: 0.458100 0.000001 18.574500 0.458100 0.000001 11.090000 8.999900 
 Maximum loglikelihood: -24.527807 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_SR_ML", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_SR_loglik")
> ### * dd_SR_loglik
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_SR_loglik
> ### Title: Loglikelihood for diversity-dependent diversification models
> ###   with a shift in the parameters at time t = tshift
> ### Aliases: dd_SR_loglik
> ### Keywords: models
> 
> ### ** Examples
> dd_SR_loglik(pars1 = c(0.2,0.1,50,0.2,0.1,70,5), pars2 = c(100,1,1,1,0,2),
+    brts = 1:10, missnumspec = 0) 
[1] -27.37304
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_SR_loglik", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_SR_sim")
> ### * dd_SR_sim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_SR_sim
> ### Title: Function to simulate the diversity-dependent diversification
> ###   process with a shift in one or more of the parameters
> ### Aliases: dd_SR_sim
> ### Keywords: models
> 
> ### ** Examples
>  dd_SR_sim(c(0.2,0.1,20,0.2,0.1,40,5),10) 
$tes

Phylogenetic tree with 7 tips and 6 internal nodes.

Tip labels:
	t13, t5, t11, t6, t12, t2, ...

Rooted; includes branch lengths.

$tas

Phylogenetic tree with 13 tips and 12 internal nodes.

Tip labels:
	t1, t3, t13, t10, t9, t5, ...

Rooted; includes branch lengths.

$L
           [,1] [,2] [,3]        [,4]
 [1,] 10.000000    0   -1  8.58535173
 [2,] 10.000000   -1    2 -1.00000000
 [3,]  8.697962   -1   -3  1.97524717
 [4,]  8.487224    2    4 -1.00000000
 [5,]  5.230997   -3   -5 -1.00000000
 [6,]  4.175136   -5   -6 -1.00000000
 [7,]  3.944306   -6   -7  1.75985385
 [8,]  3.797089   -7   -8  0.25516370
 [9,]  3.580547   -3   -9  2.85057558
[10,]  3.155716   -3  -10  0.09127409
[11,]  3.099813   -5  -11 -1.00000000
[12,]  2.913795   -6  -12 -1.00000000
[13,]  2.041068   -3  -13 -1.00000000

> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_SR_sim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_loglik")
> ### * dd_loglik
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_loglik
> ### Title: Loglikelihood for diversity-dependent diversification models
> ### Aliases: dd_loglik
> ### Keywords: models
> 
> ### ** Examples
> dd_loglik(pars1 = c(0.5,0.1,100), pars2 = c(100,1,1,1,0,2), brts = 1:10, missnumspec = 0) 
[1] -34.13958
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_loglik", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dd_sim")
> ### * dd_sim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dd_sim
> ### Title: Function to simulate the diversity-dependent diversification
> ###   process
> ### Aliases: dd_sim
> ### Keywords: models
> 
> ### ** Examples
>  dd_sim(c(0.2,0.1,20),10) 
$tes

Phylogenetic tree with 10 tips and 9 internal nodes.

Tip labels:
	t1, t9, t13, t2, t6, t11, ...

Rooted; includes branch lengths.

$tas

Phylogenetic tree with 13 tips and 12 internal nodes.

Tip labels:
	t1, t9, t13, t3, t2, t6, ...

Rooted; includes branch lengths.

$L
             [,1] [,2] [,3]       [,4]
 [1,] 10.00000000    0   -1 -1.0000000
 [2,] 10.00000000   -1    2 -1.0000000
 [3,]  6.08407036   -1   -3  0.9538028
 [4,]  6.07448572    2    4  1.5781390
 [5,]  4.51028027    4    5  1.9035245
 [6,]  4.02224138    2    6 -1.0000000
 [7,]  3.70248955    4    7 -1.0000000
 [8,]  1.58623440    4    8 -1.0000000
 [9,]  1.26439812   -1   -9 -1.0000000
[10,]  1.09423267    6   10 -1.0000000
[11,]  0.69142521    6   11 -1.0000000
[12,]  0.31086125    7   12 -1.0000000
[13,]  0.03392204   -9  -13 -1.0000000

> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dd_sim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("optimizer")
> ### * optimizer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: optimizer
> ### Title: Carries out optimization (finding a minimum)
> ### Aliases: optimizer
> ### Keywords: models
> 
> ### ** Examples
> 
> cat("No examples")
No examples> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("optimizer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("roundn")
> ### * roundn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: roundn
> ### Title: Rounds up in the usual manner
> ### Aliases: roundn
> ### Keywords: models
> 
> ### ** Examples
> 
> round(2.5)
[1] 2
> roundn(2.5)
[1] 3
> round(3.5)
[1] 4
> roundn(3.5)
[1] 4
> round(2.65,digits = 1)
[1] 2.6
> roundn(2.65,digits = 1)
[1] 2.7
> round(2.75,digits = 1)
[1] 2.8
> roundn(2.75,digits = 1)
[1] 2.8
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("roundn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sample2")
> ### * sample2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sample2
> ### Title: Takes samples in the usual manner
> ### Aliases: sample2
> ### Keywords: models
> 
> ### ** Examples
> 
> sample(x = 10,size = 5,replace = TRUE)
[1]  3  4  6 10  3
> sample2(x = 10,size = 5,replace = TRUE)
[1] 10 10 10 10 10
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sample2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.5 0.11 4.68 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
